from fastapi import FastAPI
from dotenv import load_dotenv
from pathlib import Path
import os

from transfer_routing.api.routes import router as routes_transfer
from authentication.api.routes import router as auth_router
from clusterization.api.routes import router as cluster_router
from transfer_routing.api.routes import router as transfer_router
from last_mile_routing.api.routes import router as routes_routing
from costs_transfer.api.routes import router as routes_costs_transfer
from costs_transfer.api.routes import router as routes_costs_transfer_visualization
from costs_last_mile.api.routes import router as routes_last_mile
from costs_last_mile.api import routes as costs_last_mile_routes
from simulation.api.routes import router as routes_simulation  # <-- NOVO


dotenv_path = Path(__file__).resolve().parents[0] / ".env"
load_dotenv(dotenv_path=dotenv_path, override=True)

print(f"🔍 DB_HOST em uso no ambiente: {os.getenv('DB_HOST')}")
print("DB_HOST:", os.getenv("DB_HOST"))
print("DB_PASS:", os.getenv("DB_PASS"))
print("CLUSTER_DB:", os.getenv("CLUSTER_DB"))

app = FastAPI(
    title="HubRouter API",
    version="1.0",
)


# 🔐 Autenticação
app.include_router(auth_router, prefix="/auth", tags=["Autenticação"])

# 📦 Clusterização
app.include_router(cluster_router, prefix="/cluster", tags=["Clusterização"])

# 🔁 Transferências
app.include_router(transfer_router, prefix="/transfer", tags=["Transferências"])

# 🚚 Last-Mile Routing
app.include_router(last_mile_router, prefix="/lastmile", tags=["Roteirização Last Mile"])

# 💸 Custos de Transferência
app.include_router(costs_transfer_router, prefix="/custos_transferencia", tags=["Custos Transferência"])

# 💰 Custos Last-Mile
app.include_router(costs_last_mile_router, prefix="/custos_lastmile", tags=["Custos Last Mile"])

# 🧪 Simulação
app.include_router(simulation_router, prefix="/simulacao", tags=["Simulação"])

# Healthcheck da API unificada
@app.get("/")
def read_root():
    return {"status": "ok"}
