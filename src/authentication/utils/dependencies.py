# authentication/utils/dependencies.py

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from authentication.infrastructure.token_service import verificar_token
from authentication.domain.entities import UsuarioToken

# Inst칙ncia global de HTTPBearer para uso em toda a aplica칞칚o
bearer_scheme = HTTPBearer()


def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)
) -> UsuarioToken:
    """
    Valida o token JWT e retorna um objeto UsuarioToken com as informa칞칫es do usu치rio.
    Permite usu치rios globais (hub_admin, hub_operacional) sem tenant.
    Levanta HTTP 401 se o token for inv치lido ou expirado.
    """
    try:
        token = credentials.credentials
        payload = verificar_token(token)

        role = payload.get("role")
        tenant_id = payload.get("tenant")

        # 游댳 Globais podem n칚o ter tenant
        if role in ["hub_admin", "hub_operacional"]:
            return UsuarioToken(
                id=payload["sub"],
                tenant_id=None,
                role=role,
                plano=payload.get("plano"),
            )

        # 游댳 Clientes sempre precisam de tenant
        if not tenant_id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token inv치lido ou sem tenant_id.",
                headers={"WWW-Authenticate": "Bearer"},
            )

        return UsuarioToken(
            id=payload["sub"],
            tenant_id=tenant_id,
            role=role,
            plano=payload.get("plano"),
        )

    except Exception:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token inv치lido ou expirado.",
            headers={"WWW-Authenticate": "Bearer"},
        )


def obter_tenant_id_do_token(
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)
) -> str:
    """
    Valida o token JWT e retorna apenas o tenant_id.
    游댳 Para usu치rios globais (hub_admin, hub_operacional), levanta erro,
       j치 que eles n칚o t칡m tenant.
    """
    try:
        payload = verificar_token(credentials.credentials)

        role = payload.get("role")
        tenant_id = payload.get("tenant")

        if role in ["hub_admin", "hub_operacional"]:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Usu치rios globais n칚o possuem tenant_id.",
                headers={"WWW-Authenticate": "Bearer"},
            )

        if not tenant_id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token inv치lido ou ausente",
                headers={"WWW-Authenticate": "Bearer"},
            )

        return tenant_id

    except Exception:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token inv치lido ou ausente",
            headers={"WWW-Authenticate": "Bearer"},
        )
